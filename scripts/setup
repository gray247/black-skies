#!/usr/bin/env bash
# Usage: scripts/setup
# Bootstraps the Black Skies development environment by preparing the Python
# virtualenv, installing locked dependencies, and ensuring baseline environment
# variables are present for local development.

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"
VENV_PATH="${REPO_ROOT}/.venv"
ENV_FILE="${REPO_ROOT}/.env"
REQUIREMENTS_FILE="${REPO_ROOT}/requirements.lock"
DEV_REQUIREMENTS_FILE="${REPO_ROOT}/requirements.dev.lock"
VENDOR_WHEELS_DIR="${REPO_ROOT}/vendor/wheels"
PYTHON_BIN="${PYTHON_BIN:-python3}"
NPM_REGISTRY_PING_URL="https://registry.npmjs.org/-/ping"

log() {
  printf '[setup] %s\n' "$*"
}

should_enable_node() {
  local raw_value="${BS_ALLOW_NODE:-}"
  if [[ -z "${raw_value}" ]]; then
    return 1
  fi

  local normalized
  normalized="$(printf '%s' "${raw_value}" | tr '[:upper:]' '[:lower:]')"

  case "${normalized}" in
    0|false|no|off)
      return 1
      ;;
    *)
      return 0
      ;;
  esac
}

ensure_python() {
  if ! command -v "${PYTHON_BIN}" >/dev/null 2>&1; then
    log "Python interpreter '${PYTHON_BIN}' not found. Set PYTHON_BIN to a valid Python 3.11 executable."
    exit 1
  fi
}

create_venv() {
  if [[ -d "${VENV_PATH}" ]]; then
    log "Using existing virtual environment at ${VENV_PATH}."
    return
  fi

  log "Creating virtual environment at ${VENV_PATH}."
  "${PYTHON_BIN}" -m venv "${VENV_PATH}"
}

pip_bin() {
  printf '%s/bin/pip' "${VENV_PATH}"
}

install_with_fallback() {
  local lockfile="$1"
  local label="$2"

  if [[ ! -f "${lockfile}" ]]; then
    log "${label} lockfile not found at ${lockfile}."
    exit 1
  fi

  local pip_cmd
  pip_cmd="$(pip_bin)"
  local -i tried_offline=0

  if compgen -G "${VENDOR_WHEELS_DIR}"'/*.whl' >/dev/null 2>&1; then
    tried_offline=1
    log "Installing ${label} dependencies from cached wheels in vendor/wheels."
    if "${pip_cmd}" install --require-virtualenv --no-index --find-links "${VENDOR_WHEELS_DIR}" -r "${lockfile}"; then
      return
    fi
    log "Cached wheel installation for ${label} failed; falling back to online installation."
  else
    log "No cached wheels detected; installing ${label} requirements from PyPI."
  fi

  if ! "${pip_cmd}" install --require-virtualenv -r "${lockfile}"; then
    if [[ ${tried_offline} -eq 1 ]]; then
      log "Offline installation for ${label} failed and online fallback was unsuccessful. Check network connectivity or refresh vendor wheels."
    else
      log "Online installation for ${label} failed. Check network connectivity or retry later."
    fi
    exit 1
  fi
}

ensure_env_file() {
  if [[ -f "${ENV_FILE}" ]]; then
    log ".env already exists; leaving it unchanged."
    return
  fi

  log "Creating default .env file at ${ENV_FILE}."
  cat <<'EOT' > "${ENV_FILE}"
# Default development environment variables for Black Skies.
OPENAI_API_KEY=dummy
BLACK_SKIES_BLACK_SKIES_MODE=offline
EOT
}

probe_node_registry() {
  if pnpm ping >/dev/null 2>&1; then
    log "pnpm registry ping succeeded."
    return 0
  fi

  log "pnpm registry ping failed; attempting curl fallback."

  if command -v curl >/dev/null 2>&1; then
    if curl --max-time 5 -fsS "${NPM_REGISTRY_PING_URL}" >/dev/null 2>&1; then
      log "curl registry probe succeeded."
      return 0
    fi
    log "curl registry probe failed."
  else
    log "curl not available; unable to perform registry probe fallback."
  fi

  return 1
}

maybe_bootstrap_node() {
  local raw_value="${BS_ALLOW_NODE:-}"
  if ! should_enable_node; then
    if [[ -z "${raw_value}" ]]; then
      log "BS_ALLOW_NODE not set; skipping Node.js bootstrap steps."
    else
      log "BS_ALLOW_NODE='${raw_value}' disables Node.js bootstrap; skipping Node.js steps."
    fi
    return
  fi

  if ! command -v pnpm >/dev/null 2>&1; then
    log "BS_ALLOW_NODE enabled but pnpm not found in PATH; skipping Node.js bootstrap."
    return
  fi

  log "BS_ALLOW_NODE enabled; probing npm registry connectivity before installing dependencies."

  if ! probe_node_registry; then
    log "Warning: Unable to confirm npm registry availability. Skipping pnpm install to avoid partial installs."
    return
  fi

  log "Running 'pnpm install --recursive' to sync workspace dependencies."
  if ! (cd "${REPO_ROOT}" && pnpm install --recursive); then
    log "Warning: pnpm install failed. Node dependencies may be incomplete; rerun with BS_ALLOW_NODE set after resolving issues."
    return
  fi

  log "pnpm workspace dependencies installed successfully."
}

main() {
  ensure_python
  create_venv
  install_with_fallback "${REQUIREMENTS_FILE}" "runtime"
  install_with_fallback "${DEV_REQUIREMENTS_FILE}" "development"
  ensure_env_file
  maybe_bootstrap_node
  log "Setup complete. Activate the environment with 'source .venv/bin/activate'."
}

main "$@"
