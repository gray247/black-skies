name: Eval Harness

on:
  pull_request:
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.lock', 'requirements.dev.lock', 'constraints.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -c constraints.txt -r requirements.lock -r requirements.dev.lock
      - name: Run black
        run: black --check .
      - name: Run flake8
        run: flake8

  typecheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.lock', 'requirements.dev.lock', 'constraints.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -c constraints.txt -r requirements.lock -r requirements.dev.lock
      - name: Run mypy
        run: mypy

  app-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      - name: Set up pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Install dependencies
        run: pnpm install --recursive --frozen-lockfile
      - name: Run app lint
        run: pnpm --filter app lint
      - name: Run app tests
        run: pnpm --filter app test

  app-e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      - name: Set up pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Install dependencies
        run: pnpm install --recursive --frozen-lockfile
      - name: Install Playwright browsers
        run: pnpm --filter app exec playwright install --with-deps
      - name: Run Playwright tests
        run: pnpm --filter app test:e2e

  eval:
    needs:
      - lint
      - typecheck
      - app-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.lock', 'requirements.dev.lock', 'constraints.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -c constraints.txt -r requirements.lock -r requirements.dev.lock
      - name: Run pytest
        run: pytest -q
      - name: Run eval harness
        run: python scripts/eval.py --html out/eval.html --json out/eval.json
      - name: Run smoke tests
        run: bash scripts/smoke.sh
      - name: Start FastAPI service for load test
        run: |
          uvicorn blackskies.services.app:create_app --factory --host 127.0.0.1 --port 43750 &
          echo $! > uvicorn.pid
          sleep 5
      - name: Run load test
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: python scripts/load.py --host 127.0.0.1 --port 43750 --log-level WARNING
      - name: Check load SLO
        run: |
          LEDGER_PATH=$(python - <<'PY'
from pathlib import Path
runs_root = Path("sample_project/_runtime/runs")
if not runs_root.exists():
    raise SystemExit("No load-test ledgers found.")
latest = max(runs_root.iterdir(), key=lambda p: p.stat().st_mtime)
print(latest / "run.json")
PY
)
          python scripts/check_slo.py "$LEDGER_PATH"
      - name: Upload load test ledger
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: load-ledger
          path: sample_project/_runtime/runs
      - name: Clean runtime artifacts
        if: always()
        run: rm -rf sample_project/_runtime
      - name: Stop FastAPI service
        if: always()
        run: |
          if [ -f uvicorn.pid ]; then
            kill "$(cat uvicorn.pid)" || true
            rm uvicorn.pid
          fi
      - name: Upload eval artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eval-report
          path: |
            out/eval.html
            out/eval.json
